

##############################################################

from scipy import cluster

##############################################################

help()  ////type "quit" to stop thw execution////

##################################################

import scipy
scipy.info(cluster)
######################################################3

scipy.source(cluster)


#######################################################

#####################Special Function######################################


from scipy import special

a = special.exp10(2)
print(a)
################################################

c = special.sindg(90) / cosdg(90) / tandg(90)
print(c)
##############################################

#######################Integration function###########################3

from scipy import integrate

help(integrate.quad)
####################################################

 i = scipy.integrate.quad(lambda x:special.exp10(x),0,1)
print(i)
################################################

 e = lamda x,y: x*y*2
f = lamda x:1
g = lamda x:-1
integrate.dblquad(e,0,2,f,g)
#################################################



#######################Fourier Transformation############################33

from scipy.fftpack import fft,ifft
import numpy as np
x = np.array([1,2,3,4])
y = fft(x)
print(y)

##################################################################3

from scipy.fftpack import fft,ifft
import numpy as np
x = np.array([1,2,3,4])
y = ifft(x)
print(y)

####################################################################

###############Aljebra function###############################

from scipy import linalg
a =np.array([[1,2],[3,4]])
b = linalg.inv(a)
print(b)



###################################################################3


####################Interpolation method######################





import matplotlib.pyplot as plt
from scipy import interpolate 
x = np.arange(5, 20)
y = np.exp(x/3.0)
f = interpolate.interp1d(x,y)
x1 = np.arange(6 ,12)
y1 = f(x1)
plt.plot(x, y, 'o', x1, y1, '--')
plt.show()


















